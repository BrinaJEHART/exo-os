#weather-box-window.box-window
  .box-window-top
    .box-window-top-draggable(drag='1')
      h3(drag='1') eXo-weather
    span.exit ×
    span.box-window-toggle-fullScreen ▢
  div
    input#locationInput(type='text', placeholder='enter location', value='')
  .box-window-content
    ul#locationList(style='display: none')
    #weatherData(style='display: none')
      #todayWeather
      table
        thead
          tr
            th(colspan='4') Forecast
          tr
            each head in ["date", "low. temp", "high. temp", "weather"]
                th=head
        tbody#tbody_forecast
      canvas#chart_analyze
  script.
    $(document).ready(() => {
        let weatherObj = null,
            locations = $(document.getElementById('locationList'));
        const getWeatherData = location => {
            try {
                $('#weatherData').hide();
                weather.find({ search: String(location), degreeType: 'C' }, (err, result) => {
                    if (err) {
                        console.log(err, result);
                        return;
                    }
                    weatherObj = result || [];
                    console.log(weatherObj);
                    locations.html("");
                    for (var key in weatherObj)
                        if (result.hasOwnProperty(key))
                            locations.append(`
                                <li id="${key}_place">
                                    <span class="locSpan">
                                        ${result[key].location.name}
                                    </span>
                                </li>
                            `);
                    locations.delay(100).fadeIn(200);
                    locations.focus();
                });
            } catch (err) {
                ipcRenderer.send('request-failed-to-generate-action');
            }
            inProgress = false;
        }

        locations.on("click", event => {
            $('#todayWeather').html("");
            let for_dislay = String(event.target.id);
            for_dislay = for_dislay.substr(0, for_dislay.indexOf('_'));
            locations.fadeOut(200);
            $('#weatherData').delay(100).fadeIn(100);
            $("#tbody_forecast").html("");
            let clickedObject = weatherObj[Number(for_dislay)];
            $('#todayWeather').html(`
                <span><p>Location:</p> ${clickedObject.location.name}</span>
                <span><p>Weather:</p> ${clickedObject.current.skytext}</span>
                <span><p>Longitude:</p> ${clickedObject.location.long}</span>
                <span><p>Latitude:</p> ${clickedObject.location.lat}</span>
                <span><p>Date:</p> ${moment(clickedObject.current.date).format('L')}</span>
                <span><p>Time:</p> ${moment(clickedObject.current.observationtime, "HH:mm:ss").format("hh:mm A")}</span>
                <span><p>Temp:</p> ${clickedObject.current.temperature}°C</span>
                <span><p>Windspeed:</p> ${clickedObject.current.winddisplay}</span>
                <span><p>Humidity:</p> ${clickedObject.current.humidity}%</span>
            `);
            let foreacastObj = null;
            clickedObject.forecast.forEach(day => {
                $("#tbody_forecast").append(`
                    <tr>
                        <td>${moment(day.date).format('L')}</td>
                        <td>${day.low}°C</td>
                        <td>${day.high}°C</td>
                        <td>${day.skytextday}</td>
                    </tr>
                `);
                foreacastObj = {
                    dates: [...(foreacastObj ? foreacastObj.dates : []), ...[moment(day.date).format('L')]],
                    high: [...(foreacastObj ? foreacastObj.high : []), ...[day.high]],
                    low: [...(foreacastObj ? foreacastObj.low : []), ...[day.low]],
                    avg: [
                        ...(foreacastObj ? foreacastObj.avg : []),
                        ...[parseInt(Math.ceil((Number(day.low) + Number(day.high)) / 2), 10)]
                    ]
                };
            });
            weatherObj = null;

            let weatherChart = new Chart(
                document.querySelector('#chart_analyze').getContext('2d'), {
                    type: 'line',
                    data: {
                        labels: foreacastObj.dates,
                        datasets: [{
                            data: foreacastObj.high,
                            label: "High",
                            borderColor: "#a55d40",
                            fill: true
                        }, {
                            data: foreacastObj.avg,
                            label: "Avg",
                            borderColor: "#55bd7d",
                            fill: true
                        }, {
                            data: foreacastObj.low,
                            label: "Low",
                            borderColor: "#40a5a0",
                            fill: true
                        }]
                    },
                    options: {
                        title: {
                            display: true,
                            text: 'forecast temperature chart (°C)'.toUpperCase()
                        }
                    }
                });
        });

        $("#locationInput").on('keypress', event => (event.keyCode == 13) ?
            getWeatherData($("#locationInput").val()) : null
        );
    });