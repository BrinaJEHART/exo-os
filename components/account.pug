#account-info-div-content(style='display: none;')
  #labels
    each label in ["Username:", "Member since:", "Last seen:", "Account age:"]
        div= label
        br
  #accData
    div
      input#username(type='text', value='')
    br
    div
      span#member_since
    br
    div
      span#last_seen
    br
    div
      span#age
  form#ui_icons_set
  .acc_bottom
    .picker(acp-color='#EFE9E7', acp-show-hex='no', acp-show-hsl='no', acp-show-rgb='no')
    input#toggleAccCfg.accountControlButtons(type='button', value='toggle all')
    input#saveUserCfg.accountControlButtons(type='button', value='Save cfg')
  script.
    $(document).ready(() => {
        let userName = $(document.getElementById('username')),
            userData = null, locallyStoredColor = null;
        $('#ui_icons_set').html("");
        async function retriveUserPromise() {
            user_getEverything.then(result => {
                userData = result;
                let date_created = moment(userData.date_c).format('L')
                userName.val(String(userData.name));
                $("#member_since").text(date_created);
                $("#last_seen").text(moment(userData.date_l).format('L'));
                $("#age").text(
                    `${Math.floor(Math.abs(moment.duration(moment(new Date()).diff(date_created)).asDays()))} days`
                );
                JSON.parse(userData.settings).navigationMenu.forEach(row => {
                    if (!components[row.name].enabled) return;
                    $('#ui_icons_set').append(`
                        <div class="xBoxes">
                            <input 
                                type="checkbox" 
                                id="${row.name}"
                                class="ui_filter_checboxes"
                                name="${row.name}"
                                ${row.enabled ? "checked" : null}
                            ><label for="${row.name}">${row.name}</label>
                        </div>
                    `)
                });

                setTimeout(() => $('#account-info-div-content').fadeIn(100), 10);
            });
        } (retriveUserPromise)();

        const updateUserName = () => {
            if (!userName.val().length > 4) return;
            setUserName(userName.val());
            userName.css({ background: "transparent" });
            location.reload();
        }

        const updateConfiguration = () => {
            let configList = [];
            $('#ui_icons_set .xBoxes input[type=checkbox]').each(function () {
                configList.push({
                    name: $(this).attr('name'),
                    enabled: $(this).is(":checked") ? true : false
                });
            });
            setConfiguration({ navigationMenu: configList });
            location.reload();
        }

        const updateTheme = () => {
            if (!locallyStoredColor) return;
            let cssObj = determineTheme(locallyStoredColor);
            setTheme(cssObj);
            location.reload();
        }

        $('input#saveUserCfg').click(() => {
            console.log("in update");
            // update everything
            let username, configList = [], cssObj;
            if (!userName.val().length > 4) return;

            username = userName.val();
            userName.css({ background: "transparent" });
            $('#ui_icons_set .xBoxes input[type=checkbox]').each(function () {
                configList.push({
                    name: $(this).attr('name'),
                    enabled: $(this).is(":checked") ? true : false
                });
            });
            if (!locallyStoredColor) cssObj = null;
            else cssObj = determineTheme(locallyStoredColor);

            user_setEverything(String(username), { navigationMenu: configList }, cssObj);
            location.reload();
        });

        userName.on('input', () =>
            userName.val() != userData.name ?
                userName.css({ background: "linear-gradient(to bottom, rgba(0,0,0,0), rgba(200,0,0, 0.4))" }) :
                userName.css({ background: "transparent" })
        );

        $('#toggleAccCfg').mousedown(() => {
            let toggleValue = !$('#ui_icons_set input[type=checkbox]').first().is(":checked");
            $('#ui_icons_set input[type=checkbox]').each(function () {
                $(this).prop('checked', toggleValue);
            });
        });

        userName.keypress(event => event.keyCode == 13 ? updateUserName() : null);
        AColorPicker.from('div.picker').on('change', picker => locallyStoredColor = picker.color);
    });